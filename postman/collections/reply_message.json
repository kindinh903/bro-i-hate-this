{
  "info": {
    "name": "Messages Reply API Tests (Data-Driven)",
    "_postman_id": "e2c91345-6789-01ab-cdef-0123456789cd",
    "description": "Automated tests for POST /messages/1/reply endpoint using CSV for data-driven testing.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "POST /messages/1/reply (Data-Driven)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              "// Build request body dynamically from CSV flags",
              "const d = pm.iterationData;",
              "",
              "// Helper: get boolean-ish value",
              "function asBool(v, def=true) {",
              "    if (v === undefined || v === null || v === \"\") return def;",
              "    const s = String(v).toLowerCase().trim();",
              "    if ([\"false\",\"0\",\"no\",\"n\"].includes(s)) return false;",
              "    if ([\"true\",\"1\",\"yes\",\"y\"].includes(s)) return true;",
              "    return def;",
              "}",
              "",
              "// Generate strings if requested",
              "function genStr(ch, len) {",
              "    len = parseInt(len || 0);",
              "    if (!len || len <= 0) return null;",
              "    return ch.repeat(len);",
              "}",
              "",
              "// MessageId is fixed as 1 in the endpoint",
              "",
              "// Handle different HTTP methods",
              "const httpMethod = d.get(\"http_method\") || \"POST\";",
              "pm.request.method = httpMethod;",
              "",
              "// Handle wrong endpoint URL",
              "const testCase = d.get(\"testCase\");",
              "if (testCase && testCase.includes(\"Wrong endpoint URL\")) {",
              "    // Change /messages to /message (missing 's')",
              "    pm.request.url.path = pm.request.url.path.map(segment => ",
              "        segment === \"messages\" ? \"message\" : segment",
              "    );",
              "}",
              "",
              "// Set up Authorization header",
              "const useToken = asBool(d.get(\"use_token\"), false);",
              "const tokenType = d.get(\"token_type\");",
              "",
              "// Remove existing Authorization header first",
              "pm.request.headers.remove(\"Authorization\");",
              "",
              "if (useToken) {",
              "    let token = \"\";",
              "    switch (tokenType) {",
              "        case \"valid\":",
              "            token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS13aXRoLWJ1Z3MucHJhY3RpY2Vzb2Z0d2FyZXRlc3RpbmcuY29tL3VzZXJzL2xvZ2luIiwiaWF0IjoxNzU1OTgzNDgxLCJleHAiOjE3NzE1ODM0ODEsIm5iZiI6MTc1NTk4MzQ4MSwianRpIjoiY0JFSzE4eVJuVm5YU0Q4RiIsInN1YiI6IjIiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ.KRsNLnm689GnDcLkHi5n54z7LuO_Gl3R5EXKgbTmAJM\";",
              "            break;",
              "        case \"empty\":",
              "            token = \"\";",
              "            break;",
              "        case \"invalid\":",
              "            token = \"abc.def\";",
              "            break;",
              "        case \"expired\":",
              "            token = \"expired.token.here\";",
              "            break;",
              "        case \"wrong_role\":",
              "            token = \"wrong.role.token\";",
              "            break;",
              "        default:",
              "            token = \"\";",
              "    }",
              "    pm.request.headers.add({key: \"Authorization\", value: `Bearer ${token}`});",
              "}",
              "",
              "// Build request body",
              "const includeName = asBool(d.get(\"include_name\"), true);",
              "const includeEmail = asBool(d.get(\"include_email\"), true);",
              "const includeSubject = asBool(d.get(\"include_subject\"), true);",
              "const includeMessage = asBool(d.get(\"include_message\"), true);",
              "",
              "let body = {};",
              "",
              "// name",
              "let nameVal = d.get(\"name\");",
              "const genNameLen = d.get(\"gen_name_len\");",
              "const genName = genStr(\"A\", genNameLen);",
              "if (genName) nameVal = genName;",
              "if (includeName && nameVal !== undefined) body.name = nameVal;",
              "",
              "// email",
              "let emailVal = d.get(\"email\");",
              "if (includeEmail && emailVal !== undefined) body.email = emailVal;",
              "",
              "// subject",
              "let subjectVal = d.get(\"subject\");",
              "if (includeSubject && subjectVal !== undefined) body.subject = subjectVal;",
              "",
              "// message",
              "let messageVal = d.get(\"message\");",
              "const genMsgLen = d.get(\"gen_message_len\");",
              "const genMsg = genStr(\"M\", genMsgLen);",
              "if (genMsg) messageVal = genMsg;",
              "if (includeMessage && messageVal !== undefined) body.message = messageVal;",
              "",
              "// extra unexpected field",
              "if (asBool(d.get(\"add_extra\"), false)) {",
              "    body.extra = \"field\";",
              "}",
              "",
              "// If raw_invalid_json flag is set, purposely set an invalid JSON body",
              "if (asBool(d.get(\"raw_invalid_json\"), false)) {",
              "    pm.request.body.raw = 'name: \"John\", email: \"john@doe.example\", subject: \"website\", message: \"Reply\"';",
              "} else {",
              "    pm.request.body.raw = JSON.stringify(body, null, 2);",
              "}",
              "",
              "// Log the test case being executed",
              "console.log(`Executing: ${testCase}`);",
              "console.log(`Method: ${pm.request.method}`);",
              "console.log(`Request body: ${pm.request.body.raw}`);",
              "console.log(`Authorization: ${pm.request.headers.get('Authorization') || 'None'}`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              "const expected = String(pm.iterationData.get(\"expectedStatus\") || \"\").trim();",
              "const testCase = pm.iterationData.get(\"testCase\");",
              "",
              "pm.test(`${testCase} - Status code matches expected (${expected})`, function () {",
              "    if (expected.includes(\"|\")) {",
              "        const allowed = expected.split(\"|\").map(s => parseInt(s.trim(), 10));",
              "        pm.expect(allowed).to.include(pm.response.code);",
              "    } else {",
              "        pm.response.to.have.status(parseInt(expected, 10));",
              "    }",
              "});",
              "",
              "// Additional validations for successful responses (200)",
              "if (pm.response.code === 200) {",
              "    pm.test(`${testCase} - Response has valid structure`, function () {",
              "        try {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.be.an('object');",
              "            // Check if response has expected fields for successful reply",
              "            if (responseJson.message) {",
              "                pm.expect(responseJson).to.have.property('id');",
              "                pm.expect(responseJson).to.have.property('created_at');",
              "            }",
              "        } catch (e) {",
              "            console.log('Response is not JSON or has unexpected structure');",
              "        }",
              "    });",
              "}",
              "",
              "// Additional validations for authentication errors (401)",
              "if (pm.response.code === 401) {",
              "    pm.test(`${testCase} - Unauthorized response has message`, function () {",
              "        try {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('message');",
              "            pm.expect(responseJson.message.toLowerCase()).to.include('unauthorized');",
              "        } catch (e) {",
              "            pm.expect(pm.response.text()).to.not.be.empty;",
              "        }",
              "    });",
              "}",
              "",
              "// Additional validations for not found errors (404)",
              "if (pm.response.code === 404) {",
              "    pm.test(`${testCase} - Not found response has message`, function () {",
              "        try {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('message');",
              "        } catch (e) {",
              "            pm.expect(pm.response.text()).to.not.be.empty;",
              "        }",
              "    });",
              "}",
              "",
              "// Additional validations for bad request errors (400)",
              "if (pm.response.code === 400) {",
              "    pm.test(`${testCase} - Bad request response has message`, function () {",
              "        try {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('message');",
              "        } catch (e) {",
              "            pm.expect(pm.response.text()).to.not.be.empty;",
              "        }",
              "    });",
              "}",
              "",
              "// Additional validations for method not allowed errors (405)",
              "if (pm.response.code === 405) {",
              "    pm.test(`${testCase} - Method not allowed response has message`, function () {",
              "        try {",
              "            const responseJson = pm.response.json();",
              "            pm.expect(responseJson).to.have.property('message');",
              "        } catch (e) {",
              "            pm.expect(pm.response.text()).to.not.be.empty;",
              "        }",
              "    });",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"{{name}}\",\n  \"email\": \"{{email}}\",\n  \"subject\": \"{{subject}}\",\n  \"message\": \"{{message}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/messages/1/reply",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "messages",
            "1",
            "reply"
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://3c0a02223727.ngrok-free.app"
    }
  ]
}